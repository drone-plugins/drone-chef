#!/usr/bin/env ruby

require "csv"
require "gli"

$LOAD_PATH.push File.expand_path("../../lib", __FILE__)

Signal.trap("INT") do
  abort
end

begin
  require "drone/chef"
rescue LoadError
  require "rubygems"
  require "drone/chef"
end

include GLI::App

def load_env(options, key)
  # rubocop:disable GuardClause
  if options[key.downcase.to_sym].nil? && !ENV["PLUGIN_#{key.upcase}"].nil?
    options[key.downcase.to_sym] = ENV["PLUGIN_#{key.upcase}"]
  end
end

def load_secrets(options, key)
  if options[key.downcase.to_sym].nil? &&
     !ENV["CHEF_#{key.upcase}"].nil?
    options[key.downcase.to_sym] = ENV["CHEF_#{key.upcase}"]
  end
end

program_desc "Drone Chef Plugin"

desc "Upload cookbook"

command :upload do |c|
  c.desc "The user to upload with"
  c.flag [:u, :user]
  c.desc "The user's private key"
  c.flag [:k, :private_key], mask: true
  c.desc "The Chef server to upload to"
  c.flag [:s, :server]
  c.desc "To SSL or not to SSL"
  c.switch [:v, :ssl_verify]
  c.desc "The Chef Organization to upload to"
  c.flag [:o, :org]
  c.desc "Comma delimited list of Berksfiles to use"
  c.flag [:b, :berks_files]
  c.desc "Wether or not to freeze the cookbook versions"
  c.switch [:f, :freeze]
  c.desc "Enable/Disable ability to upload all dependency cookbooks as well"
  c.switch [:r, :recursive]
  c.desc "Debug log output"
  c.switch [:d, :debug]

  c.action do |_global_options, options, _args|
    %w(user private_key).each do |k|
      load_secrets options, k
    end
    %w(user server ssl_verify org freeze
       recursive debug private_key).each do |k|
      load_env options, k
    end

    # Defaults
    options[:ssl_verify] = true if options[:ssl_verify].nil?
    options[:freeze] = true if options[:freeze].nil?
    options[:recursive] = true if options[:recursive].nil?
    options[:debug] = false if options[:debug].nil?

    unless options[:berks_files].nil?
      options[:berks_files] = CSV.parse(options[:berks_files]).first
    end
    options[:berks_files] = ["Berksfile"] if options[:berks_files].nil?

    Drone::Chef.new(options).execute!
  end
end

exit run(ARGV)
