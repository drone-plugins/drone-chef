#!/usr/bin/env ruby

require 'json'
require 'pathname'
require 'chef/cookbook/metadata'

#
# Parse build data JSON string
#
def build_data
  @build_data ||= JSON.parse ARGV[1]
end

#
# Path to project workspace
#
def workspace
  build_data['workspace']['path']
end

#
# Grab build args from build_data
#
def build_args
  build_data['vargs']
end

#
# Cookbook metadata
#
def cookbook
  @metadata ||= begin
    metadata = Chef::Cookbook::Metadata.new
    metadata.from_file("#{workspace}/metadata.rb")
    metadata
  end
end

#
# Wether or not to freeze the cookbook version during upload
#
def freeze
  @freeze ||= begin
    return true if build_args['freeze'].nil?
    build_args['freeze']
  end
end

#
# Verify required build arguments
#
def verify_reqs # rubocop:disable AbcSize
  puts 'Verifying required arguments'
  fail 'No build data found' if ARGV[1].nil?
  fail 'Username required' if build_args['user'].nil?
  fail 'Key required' if build_args['key'].nil?
  fail 'Chef server URL required' if build_args['server'].nil?
  fail 'Chef organization required' if build_args['org'].nil?
end

#
# Is cookbook already uploaded at given version?
#
def cookbook_uploaded?
  command = ["knife cookbook show #{cookbook.name} #{cookbook.version}"]
  command << "-u #{build_args['user']} -k key.pem" # User/key
  command << "-s #{chef_url}" # Chef server/org
  system(*command)
end

def key_path
  "#{workspace}/key.pem"
end

#
# Write string encoded RSA key to a temporary file
#
def write_key
  puts 'Writing temp key'
  File.open(key_path, 'w') do |f|
    f.write build_args['key']
  end
end

#
# Chef URL based off Chef Server and Org
#
def chef_url
  "#{build_args['server']}/#{build_args['org']}"
end

#
# Upload the cookbook
#
def upload_cookbook # rubocop:disable AbcSize
  puts "Uploading cookbook #{cookbook.name}@#{cookbook.version}"
  command = ["knife cookbook upload #{cookbook.name}"]
  command << "-o #{Pathname.new(workspace).parent}" # cookbook directory path
  command << "-u #{build_args['user']} -k #{key_path}" # User/key
  command << "-s #{chef_url}" # Chef server/org
  command << '--freeze' if freeze
  puts `#{command.join(' ')}`
  fatal 'Failed to upload cookbook' unless $?.success?
end

######
# MAIN
######
verify_reqs
write_key
if cookbook_uploaded?
  fatal "Cookbook #{cookbook.name} version #{cookbook.version} " \
        "already uploaded to #{chef_url}"
end
upload_cookbook
